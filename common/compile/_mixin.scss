@charset "utf-8";

// ===========================================================
// mixin
// ===========================================================   

@import "compass";

/*
$sprites: sprite-map("sprites/*.png");
$sprites-img:sprite-url($sprites);

@mixin sprite-background($name) {
background-image: $sprites;
background-repeat: no-repeat;
overflow: hidden;
content: "";
position: absolute;
display: block;
height: image-height(sprite-file($sprites, $name)) / 2;
width: image-width(sprite-file($sprites, $name)) / 2;
$ypos: round(nth(sprite-position($sprites, $name), 2) / 2);
background-position: 0 $ypos;
@include background-size(39px auto);
}

@mixin sprite-background-ajust($name) {
background-image: $sprites;
background-repeat: no-repeat;
$ypos: round(nth(sprite-position($sprites, $name), 2) / 2);
background-position: 0 $ypos;
@include background-size(39px auto);
}

*/

// clearfix
@mixin clearfix {
  &:before,
  &:after {
    content: " ";
    display: table;
  }

  &:after {
    clear: both;
  }
}

//fontsize
@mixin fontsize($size: 24, $base: 16) {
  font-size: $size + px;
  font-size: ($size / $base) * 1rem;
}

//========================================================================================
// 汎用 mixin
// ========================================================================================

// rem フォント指定
//-------------------------------------------------------------------------------------------------------
//        $size:    適用したいフォントサイズ（px）
//        $context: 継承しているフォントサイズ。デフォルトで $baseFontSize を継承するので、基本的に指定不要（px）
//
//        【使いかた】
//        p.foo {
//                @include rem(14, 16);  <= 16px を継承している p 要素に 1.4rem を指定（IE8 以下には代替として％指定を適用）
//        }
//-------------------------------------------------------------------------------------------------------
@mixin rem($size, $context: $font-size-base) {
        $size: nounit($size);
        $context: nounit($context);
        font-size: fz($size, $context);
        font-size: ($size / 10) + rem;
}

// SemanticGridSystem from http://semantic.gs/
// _setting.scssのGrid値に沿って生成される。
//-------------------------------------------------------------------------------------------------------
//        $span: グリッド数
//
//        【使いかた】
//        _setting.scssの記述
//        $column-width: 60;
//        $gutter-width: 20;
//        $columns: 12;
//        $total-width: 100%; ←FluidLayout時に設定する
//
//        使用時の記述①通常カラム
//        header { @include column(12); }
//        article { @include column(9); }
//        aside { @include column(3); }
//
//        @media (max-device-width: 960px) {
//                article { @include column(12); }
//                aside { @include column(12); }
//        }
//
//        使用時の記述②通常カラムの入れ子
//        <article>
//                <ul>
//                        <li>1</li>
//                        <li>2</li>
//                        <li>3</li>
//                        <li>4</li>
//                        <li>5</li>
//                        <li>6</li>
//                </ul>
//        </article>
//        <aside>...</aside>
//
//        article {
//                @include column(9);
//                ul {
//                        @include row(9);
//                        li {
//                                @include column(3,9);
//                        }
//                }
//        }
//        aside {
//                @include column(3);
//        }
//
//        使用時の記述③カラムのインデント
//        article {
//                @include push(2);
//        }
//        article {
//                @include pull(2);
//        }
//-------------------------------------------------------------------------------------------------------

@mixin row($columns:$columns) {
        display: block;
        width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns));
        margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1);
        @if ($supportIe7 == true) {
                *width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns))-$correction;
                *margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1)-$correction;
        }
        @extend %clearfix;
}
@mixin column($x,$columns:$columns) {
        display: inline;
        float: left;
        width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns));
        margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($columns));
        @if ($supportIe7 == true) {
                *width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns))-$correction;
                *margin: 0 $total-width*(($gutter-width*.5)/gridsystem-width($columns))-$correction;
        }
}
@mixin push($offset:1) {
        margin-left: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}
@mixin pull($offset:1) {
        margin-right: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns));
}

// 固定幅サイト用簡易型等幅カラム生成mixin
// _setting.scssのカラム幅を使用。デザインでmarginが決まり切ってる際に使用
//-------------------------------------------------------------------------------------------------------
//        $column-num: カラム数
//        $margin-num: マージンの大きさ
//        $column-parent-width: 親カラムの大きさ(初期値は設定値)
//
//        【使いかた】
//        .column-layout-3 {
//          @include column-unit(3,20px);
//        }
//-------------------------------------------------------------------------------------------------------
@mixin column-unit($column-num,$margin-num,$column-parent-width:$main-column-width) {
        @extend %clearfix;
        .segment{
                float: left;
                margin-right: $margin-num;
                width: ($column-parent-width - ($margin-num * ($column-num - 1))) / $column-num;

                &:last-child{
                        margin-right: 0;
                }
        }
}

// メディアクエリー（ブレークポイント別管理）
//-------------------------------------------------------------------------------------------------------
//        below は引数のブレークポイント以下、above は引数のブレークポイントより上のサイズへの
//        メディアクエリー別スタイルが記述される
//        引数には原則、_vars.scss で定義したブレークポイント用変数を指定する
//
//        【使いかた】
//        div {
//                @include below($breakMedium) {
//                        margin-bottom: 0;
//                }
//                @include inbetween($breakSmall, $breakMedium) {
//                        margin-bottom: 40px;
//                }
//        }
//-------------------------------------------------------------------------------------------------------
@mixin below($breakpoint) {
        @media screen and (max-width: $breakpoint) {
                @content;
        }
}
@mixin above($breakpoint) {
        @media screen and (min-width: $breakpoint + 1) {
                @content;
        }
}
@mixin inbetween($breakpointSmall, $breakpointLarge) {
        @media screen and (min-width: $breakpointSmall + 1) and (max-width: $breakpointLarge) {
                @content;
        }
}

// Retina対応スプライトシートmixin
//-------------------------------------------------------------------------------------------------------
//        【使いかた】
//        @import "hogehoge/*.png";
//        @include all-retina-sprites($sprite-sprites, $dimensions: true);
//-------------------------------------------------------------------------------------------------------
@mixin all-retina-sprites($map, $dimensions: false){
        $base-class: sprite-map-name($map);

        .#{$base-class}-retina-sprite{
                background: sprite-url($map) no-repeat;
                @include background-size(ceil(image-width(sprite-path($map)) / 2) auto);
        }

        @each $sprite in sprite-names($map){
                .#{$base-class}-#{$sprite}{
                        @extend .#{$base-class}-retina-sprite;

                        @if $dimensions{
                                width: ceil(image-width(sprite-file($map, $sprite)) / 2);
                                height: ceil(image-height(sprite-file($map, $sprite)) / 2);
                        //中央配置しかない時につける
                        //margin-top: -(ceil(image-height(sprite-file($map, $sprite)) / 4));
                        }
                        $pos: sprite-position($map, $sprite);
                        background-position: ceil(nth($pos, 1) / 2) ceil(nth($pos, 2) / 2);
                }
        }
}

// アイコン生成
//-------------------------------------------------------------------------------------------------------
//        $pos:     ビュレット表示位置（left, right）
//        $space:   親要素外辺からのビュレット位置（px）
//        $includeName: 生成されたスプライトクラスを記述してアイコンを指定
//-------------------------------------------------------------------------------------------------------
@mixin addIcon ($pos, $space, $includeName) {
        position: relative;
        &:before {
                content: "";
                position: absolute;
                top: 0;
                #{$pos}: $space;
                z-index: 1;
                display: block;
                overflow: hidden;
                @extend #{"."+$includeName};
        }
}

// ビュレット生成
//-------------------------------------------------------------------------------------------------------
//        $top:     親要素上外辺からのビュレット位置（px）
//        $left:    親要素左外辺からのビュレット位置（px）
//        $includeName: 生成されたスプライトクラスを記述してアイコンを指定
//-------------------------------------------------------------------------------------------------------
@mixin addBullet ($top, $left, $includeName) {
        position: relative;
        &:before {
                content: "";
                position: absolute;
                top: $top;
                left: $left;
                display: block;
                overflow: hidden;
                @extend #{"."+$includeName};
        }
}

// 汎用矢印生成
//-------------------------------------------------------------------------------------------------------
//        $space:    親要素外辺からのビュレット位置（px）
//        $bdrWidth: 矢印の線幅（px）
//        $bdrColor: 矢印の前景色（hex）
//-------------------------------------------------------------------------------------------------------
@mixin addArrow($space, $bdrWidth, $bdrColor) {
        position: relative;
        &:after {
                content: "";
                position: absolute;
                top: 50%;
                right: $space + $bdrWidth;
                display: block;
                margin-top: -($bdrWidth + $bdrWidth / 2);
                border-right: $bdrWidth solid $bdrColor;
                border-bottom: $bdrWidth solid $bdrColor;
                width: $bdrWidth * 2;
                height: $bdrWidth * 2;
                @include rotate(-45deg);
        }
}

// 汎用三角形生成
//https://github.com/thoughtbot/bourbon/blob/master/app/assets/stylesheets/addons/_triangle.scss
//-------------------------------------------------------------------------------------------------------
//        $size: 三角形の大きさ
//        $color: 三角形の色
//        $direction: 三角形の向き
//-------------------------------------------------------------------------------------------------------
@mixin triangle ($size, $color, $direction) {
        height: 0;
        width: 0;

        @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
                border-color: transparent;
                border-style: solid;
                border-width: $size / 2;

                @if $direction == up {
                        border-bottom-color: $color;

                } @else if $direction == right {
                        border-left-color:   $color;

                } @else if $direction == down {
                        border-top-color:    $color;

                } @else if $direction == left {
                        border-right-color:  $color;
                }
        }

        @else if ($direction == up-right) or ($direction == up-left) {
                border-top: $size solid $color;

                @if $direction == up-right {
                        border-left:  $size solid transparent;

                } @else if $direction == up-left {
                        border-right: $size solid transparent;
                }
        }

        @else if ($direction == down-right) or ($direction == down-left) {
                border-bottom: $size solid $color;

                @if $direction == down-right {
                        border-left:  $size solid transparent;

                } @else if $direction == down-left {
                        border-right: $size solid transparent;
                }
        }
}

// RGBa フォールバック
//-------------------------------------------------------------------------------------------------------
//        $type:  前景色か背景色か（'color'/'bg'）
//        $color: 16 進数で色を指定
//        $per:   アルファ値（.1〜1）
//
//        使用例：
//        div.foo {
//                @include trans('bg', #c00, .5);
//        }
//-------------------------------------------------------------------------------------------------------
@function trans($color, $per) {
        @if $per == .1 { @return lighten($color, 45%); }
        @if $per == .2 { @return lighten($color, 40%); }
        @if $per == .3 { @return lighten($color, 35%); }
        @if $per == .4 { @return lighten($color, 30%); }
        @if $per == .5 { @return lighten($color, 25%); }
        @if $per == .6 { @return lighten($color, 20%); }
        @if $per == .7 { @return lighten($color, 15%); }
        @if $per == .8 { @return lighten($color, 10%); }
        @if $per == .9 { @return lighten($color, 5%); }
        @if $per == 1 { @return $color; }
}
@mixin trans($type, $color, $per) {
        @if $type == 'color' {
                color: trans($color, $per);
                color: rgba($color, $per)
        }
        @if $type == 'bg' {
                background-color: trans($color, $per);
                background-color: rgba($color, $per);
        }
}

// RetinaImage
//-------------------------------------------------------------------------------------------------------
//        $file-1:  通常画像パス
//        $file-2:  Retina画像パス
//        $width: 通常画像の幅
//        $height: 通常画像の高さ
//
//        【使いかた】
//        div.logo {
//                @include image-retina("logo.png", "logo2x.png", 100px, 25px);
//        }
//-------------------------------------------------------------------------------------------------------
@mixin img-retina($file-1x, $file-2x, $width-1x, $height-1x) {
        background-image: url(#{$file-1x});

        @media
        only screen and (-webkit-min-device-pixel-ratio: 2),
        only screen and (min--moz-device-pixel-ratio: 2),
        only screen and (-o-min-device-pixel-ratio: 2/1),
        only screen and (min-device-pixel-ratio: 2),
        only screen and (min-resolution: 192dpi),
        only screen and (min-resolution: 2dppx) {
                background-image: url(#{file-2x});
                background-size: $width-1x $height-1x;
        }
}

// 配置mixin
//さっさと配置
//-------------------------------------------------------------------------------------------------------
//        【使いかた】
//        .column-layout-3 {
//                @include abs-pos(absolute, 20px, auto, auto, 20px);
//        }
//-------------------------------------------------------------------------------------------------------
@mixin abs-pos ($position, $top: auto, $right: auto, $bottom: auto, $left: auto) {
        top: $top;
        right: $right;
        bottom: $bottom;
        left: $left;
        position: $position;
}

// box-emboss効果
//凹んだ立体感を出すエフェクト。引数は（上部の黒線の透明度, 上部の黒線の大きさ,下部の白線の透明度, 下部の白線の大きさ）
//-------------------------------------------------------------------------------------------------------
//        【使いかた】
//        .box{
//                @include box-emboss(0.8, 1px, 0.05, 1px);
//        }
//-------------------------------------------------------------------------------------------------------
@mixin box-emboss($opacity, $large, $opacity2, $large2){
        box-shadow:white($opacity) 0 $large 0, inset black($opacity2) 0 $large2 0;
}

// letterpress効果
//紙にプレスしたような薄い白い影をテキストにつけるエフェクト。引数は（透明度, 大きさ）
//-------------------------------------------------------------------------------------------------------
//        【使いかた】
//        .box{
//                @include letterpress(0.8, 1px);
//        }
//-------------------------------------------------------------------------------------------------------
@mixin letterpress($opacity, $large){
        text-shadow:white($opacity) 0 $large 0;
}

// textをすっ飛ばして背景画像を使うアレ
//-------------------------------------------------------------------------------------------------------
//        【使いかた】
//        .logo{
//                background: url("logo.png");
//                height:100px;
//                width:200px;
//                @include hide-text;
//        }
//-------------------------------------------------------------------------------------------------------
@mixin hide-text{
        overflow:hidden;
        text-indent:-9000px;
        display:block;
}

// IE7対応inline-block用mixin
//-------------------------------------------------------------------------------------------------------
@mixin  inline_block {
        display: inline-block;
        @if ($supportIe7 == true) {
                *display: inline;
                *zoom: 1;
        }
}

// 頻出スタイルmixin
//-------------------------------------------------------------------------------------------------------

// 中央揃え
@mixin center-block {
        display: block;
        margin-left: auto;
        margin-right: auto;
}

// 縦中央揃え
@mixin vertical-middle{
        display: inline-block;
        vertical-align: middle;
}

// サイズ指定
@mixin size($width, $height) {
        width: $width;
        height: $height;
}

// レスポンシブ画像
@mixin img-responsive($display: block) {
        display: $display;
        max-width: 100%;
        height: auto;
}